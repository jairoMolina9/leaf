{"version":3,"sources":["components/views/Register/logo 3.png","logo.svg","components/views/Register/RegisterForm.js","components/views/Register/Register.js","components/views/Donate/DonateForm.js","components/views/Donate/Donate.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","React","Component","Register","DonateForm","props","state","message","address","category","handleChange","bind","handleSubmit","testingToken","this","event","nam","target","name","val","value","setState","requestOptions","method","headers","body","JSON","stringify","phone","password","fetch","then","response","json","data","token","console","log","Authorization","itemToDonate","preventDefault","onSubmit","className","type","onChange","placeholder","Donate","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,oC,uECA3CD,EAAOC,QAAU,IAA0B,kC,oNCIhBC,IAAMC,U,MCSlBC,IC8FAC,E,kDAvGb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,QAAS,QACTC,QAAS,mCACTC,SAAU,QAGZ,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBAVH,E,gEAcjBG,KAAKD,iB,mCAGME,GACX,IAAIC,EAAMD,EAAME,OAAOC,KACnBC,EAAMJ,EAAME,OAAOG,MACvBN,KAAKO,SAAL,eAAiBL,EAAMG,M,qCAGT,IAAD,OACPG,EAAiB,CACrBC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CACnBC,MAAO,eACPC,SAAU,oBAGdC,MACE,yDACAR,GAECS,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,EAAKb,SAAS,CAAEc,MAAOD,EAAKC,QAC5BC,QAAQC,IAAIH,GACZE,QAAQC,IAAI,EAAK/B,MAAM6B,Y,mCAIhBpB,GACX,IAAMO,EAAiB,CACrBC,OAAQ,OACRC,QAAS,CACPc,cAAc,m+BACd,eAAgB,oBAElBb,KAAMC,KAAKC,UAAU,CACnBnB,QAAS,mCACT+B,aAAc,CAAEhC,QAASO,KAAKP,QAASE,SAAUK,KAAKL,aAI1DqB,MACE,2DACAR,GAECS,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIE,QAAQC,IAAIH,MAE5BnB,EAAMyB,mB,+BAIN,OACE,0BAAMC,SAAU3B,KAAKF,aAAc8B,UAAU,eAC3C,8BACEA,UAAU,aACVxB,KAAK,UACLyB,KAAK,OACLvB,MAAON,KAAKR,MAAMC,QAClBqC,SAAU9B,KAAKJ,aACfmC,YAAY,YAEd,2BACEH,UAAU,cACVxB,KAAK,UACLyB,KAAK,OACLvB,MAAON,KAAKR,MAAME,QAClBoC,SAAU9B,KAAKJ,aACfmC,YAAY,YAEd,4BACEH,UAAU,cACVxB,KAAK,WACLE,MAAON,KAAKR,MAAMG,SAClBmC,SAAU9B,KAAKJ,cAEf,4BAAQU,MAAM,QAAd,QACA,4BAAQA,MAAM,YAAd,YACA,4BAAQA,MAAM,SAAd,UAGF,2BAAOsB,UAAU,aAAaC,KAAK,SAASvB,MAAM,gB,GAlGjCnB,IAAMC,WCIhB4C,MAJf,WACE,OAAO,iCAAM,kBAAC,EAAD,MAAN,MCWMC,MATf,WACE,OAEE,yBAAKL,UAAU,OACb,kBAAC,EAAD,QCEcM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMzD,c","file":"static/js/main.564d49d3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo 3.0b009f5c.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport style from \"./RegisterForm.css\";\nimport logo from './logo 3.png'; // with import\n\nclass RegisterForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      phone: \"\",\n      password: \"\"\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    let nam = event.target.name;\n    let val = event.target.value;\n    this.setState({ [nam]: val });\n  }\n\n  handleSubmit(event) {\n    alert(\"A name was submitted: \");\n    const requestOptions = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        phone: this.state.phone,\n        password: this.state.password\n      })\n  };\n  fetch('https://brooklyn-hackathon.herokuapp.com/api/createUser', requestOptions)\n      .then(response => response.json())\n      .then(data => console.log(data));\n\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit} className=\"register-form\">\n\n      <p class = \"title\"> Register </p>\n\n        <input class = \"phoneField input-field\"\n          name=\"phone\"\n          type=\"text\"\n          value={this.state.phone}\n          onChange={this.handleChange}\n          placeholder=\"Phone\"\n        />\n        <input class = \"passwordField input-field\"\n          name=\"password\"\n          type=\"password\"\n          value={this.state.password}\n          onChange={this.handleChange}\n          placeholder=\"Password\"\n        />\n\n        <input class = \"loginButton submit-btn\" type=\"submit\" value=\"Sign up\" />\n        <img src={logo} class = \"logo3\" />\n\n\n      </form>\n    );\n  }\n}\n\nexport default RegisterForm;\n","import React from \"react\";\nimport RegisterForm  from \"./RegisterForm\";\n\nfunction Register () {\n  return <div>\n    <p class = \"title\"> Register </p>\n\n    <RegisterForm />\n\n    <p class = \"loginlink\"> You have an account? <b>Log-in</b> </p>\n   </div>;\n}\n\nexport default Register;\n","import React from \"react\";\nimport style from \"./DonateForm.css\";\n\nclass DonateForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      message: \"pizza\",\n      address: \"20 W 34th St, New York, NY 10001\",\n      category: \"food\"\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.testingToken = this.testingToken.bind(this);\n  }\n\n  componentDidMount() {\n    this.testingToken();\n  }\n\n  handleChange(event) {\n    let nam = event.target.name;\n    let val = event.target.value;\n    this.setState({ [nam]: val });\n  }\n\n  testingToken() {\n    const requestOptions = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        phone: \"347-484-1636\",\n        password: \"secretpassword\"\n      })\n    };\n    fetch(\n      \"https://brooklyn-hackathon.herokuapp.com/api/loginUser\",\n      requestOptions\n    )\n      .then(response => response.json())\n      .then(data => {\n        this.setState({ token: data.token });\n        console.log(data);\n        console.log(this.state.token);\n      });\n  }\n\n  handleSubmit(event) {\n    const requestOptions = {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1ZTgxMzExMzE4OWY0NDAwMTc2NDMxY2QiLCJwaG9uZSI6IjM0Ny00ODQtMTYzNyIsInBhc3N3b3JkIjoiJDJiJDA1JFFkUi5yZFFRQzF5VExhVTVzbDBXLi40Tzg0MnB2SFNHRU5OS0tZTmlkMkZhNEZlN2ltTVJ5IiwiaXRlbXNUb0RvbmF0ZSI6W3siaXRlbVR5cGUiOiJmb29kIiwiX2lkIjoiNWU4MTMxYjUxODlmNDQwMDE3NjQzMWNlIiwiaXRlbURlc2NyaXB0aW9uIjoic3RlYWtzIiwibGF0aXR1ZGUiOjQwLjkwMDE2MzcsImxvbmdpdHVkZSI6LTczLjEwMDMxMDd9LHsiaXRlbVR5cGUiOiJmb29kIiwiX2lkIjoiNWU4MTM2ZWMxODlmNDQwMDE3NjQzMWQyIiwiaXRlbURlc2NyaXB0aW9uIjoic3RlYWtzIiwibGF0aXR1ZGUiOjQwLjkwMDE2MzcsImxvbmdpdHVkZSI6LTczLjEwMDMxMDd9LHsiaXRlbVR5cGUiOiJmb29kIiwiX2lkIjoiNWU4MTM3N2ExODlmNDQwMDE3NjQzMWQzIiwiaXRlbURlc2NyaXB0aW9uIjoic3RlYWtzIiwibGF0aXR1ZGUiOjQwLjkwMDE2MzcsImxvbmdpdHVkZSI6LTczLjEwMDMxMDd9LHsiaXRlbVR5cGUiOiJmb29kIiwiX2lkIjoiNWU4MTM4YjgxODlmNDQwMDE3NjQzMWQ3IiwiaXRlbURlc2NyaXB0aW9uIjoic3RlYWtzIiwibGF0aXR1ZGUiOjQwLjkwMDE2MzcsImxvbmdpdHVkZSI6LTczLjEwMDMxMDd9XSwiX192Ijo0LCJpYXQiOjE1ODU1Mjg0NzV9.OiKBXZP3qcToBFfFQiJdr6ZMlhbGFs-AnkXWlDhiw5o`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        address: \"20 W 34th St, New York, NY 10001\",\n        itemToDonate: { message: this.message, category: this.category }\n      })\n    };\n\n    fetch(\n      \"https://brooklyn-hackathon.herokuapp.com/api/userAddItem\",\n      requestOptions\n    )\n      .then(response => response.json())\n      .then(data => console.log(data));\n\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit} className=\"donate-form\">\n        <textarea\n          className=\"text-field\"\n          name=\"message\"\n          type=\"text\"\n          value={this.state.message}\n          onChange={this.handleChange}\n          placeholder=\"Message\"\n        />\n        <input\n          className=\"input-field\"\n          name=\"address\"\n          type=\"text\"\n          value={this.state.address}\n          onChange={this.handleChange}\n          placeholder=\"address\"\n        />\n        <select\n          className=\"select-list\"\n          name=\"category\"\n          value={this.state.category}\n          onChange={this.handleChange}\n        >\n          <option value=\"food\">food</option>\n          <option value=\"clothing\">clothing</option>\n          <option value=\"other\">other</option>\n        </select>\n\n        <input className=\"submit-btn\" type=\"submit\" value=\"Submit\" />\n      </form>\n    );\n  }\n}\n\nexport default DonateForm;\n","import React from \"react\";\nimport DonateForm  from \"./DonateForm\";\n\nfunction Donate () {\n  return <div> <DonateForm /> </div>;\n}\n\nexport default Donate;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport  Register from './components/views/Register/Register';\nimport Donate from './components/views/Donate/Donate';\n\nfunction App() {\n  return (\n\n    <div className=\"app\">\n      <Donate />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}